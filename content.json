{"meta":{"title":"learner'blog","subtitle":null,"description":"花无凋零之日，意无传递之时 。爱情亘古不变，紫罗兰与世长存","author":"learner","url":""},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2024-03-27T13:00:23.062Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"learner && 淡燃 与&nbsp; learner &nbsp; （ ） 对话中... bot_ui_ini()","keywords":null},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2024-03-28T05:17:22.095Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2021-11-09T14:13:18.000Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2024-03-08T05:20:00.000Z","updated":"2024-03-28T09:14:13.613Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"我喜欢的音乐"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2021-11-09T14:13:18.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2023-03-23T07:08:00.000Z","updated":"2024-03-27T12:41:19.615Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2024-03-27T13:54:28.646Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 回忆 故事的开始 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"tags","date":"2024-04-02T13:02:55.000Z","updated":"2024-04-02T13:03:05.947Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"子数组和为0计数","slug":"2","date":"2024-04-04T13:45:51.399Z","updated":"2024-04-04T13:59:18.989Z","comments":true,"path":"2024/04/04/2/","link":"","permalink":"/2024/04/04/2/","excerpt":"","text":"B. Eugene and an array（一个数组中，求和为0的子数组的数量）https://codeforces.ml/group/DOZ49JViPG/contest/380948/problem/B 题意：定义一个数组为 good array 如果该数组的所有子数组和都不为 0 求一个数组中有多少个子数组是 good array。 思路：运用前缀和查找出和为 0 的子数组，若前缀 pre[i] 之前存在一个相同的 pre[j] (j &lt; i)， 则子数组 [j, i] 的和为 0, 若 pre[i] == 0， 则其本身也是一个和为 0 的子数组。 #include&lt;bits/stdc++.h&gt; #define ll long long #define ull unsigned long long #define IOS ios::sync_with_stdio(false);cin.tie(0);cout.tie(0); using namespace std; const ll N = 2e5 + 5; ll n, pre[N]; map&lt;ll, ll&gt; mp;//记录前缀和相同的最右边的位置 void solve() { cin &gt;&gt; n; ll ans =n * (n + 1) / 2;//答案最大值为 n * (n + 1) / 2, 后续处理删除不符合条件的子数组 ll l = 0;//用l标记左边已经处理到的位置，l前面的无需处理，否则会造成重复子数组的删除 for (ll i = 1, x; i &lt;= n; i++) { cin &gt;&gt; x; pre[i] = pre[i - 1] + x;//预处理前缀和 } for (ll i = 1; i &lt;= n; i++) { if (mp[pre[i]] + 1 &gt; l &amp;&amp; (mp[pre[i]] || !pre[i]))//要删除[mp[pre[i]] + 1, i]的子数组，若mp[pre[i]] + 1 &gt; l则当前可删除为删除过的子数组(删除区间[l, mp[pre[i]] + 1 &gt; l]中的部分元素) { ans -= (mp[pre[i]] - l + 1) * (n - i + 1);//删除不符合条件并且没有删过的子数组 l = mp[pre[i]] + 1;//将l更新至最右边， 端点在左边不符合条件的子数组均已删除 } mp[pre[i]] = i; } cout &lt;&lt; ans &lt;&lt; &#39;\\n&#39;; }","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"codeforces","slug":"codeforces","permalink":"/tags/codeforces/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"LCA算法板子","slug":"1","date":"2024-03-25T09:54:14.393Z","updated":"2024-04-04T13:59:06.992Z","comments":true,"path":"2024/03/25/1/","link":"","permalink":"/2024/03/25/1/","excerpt":"","text":"LCAtarjan#include &lt;bits/stdc++.h&gt; using namespace std; typedef long long ll; const ll N = 5e5 + 7; vector&lt;ll&gt; G[N], Q[N]; ll ans[N][3], fa[N], n, m, s; ll vis[N]; void init() { for (ll i = 0; i &lt; N; i++) fa[i] = i; } int find(int x) { return x == fa[x] ? x : fa[x] = find(fa[x]); } void tarjan(int u) { vis[u] = 1;//标记该点已被访问 for (auto i : Q[u]) { if (vis[ans[i][1]] &amp;&amp; vis[ans[i][0]]) ans[i][2] = find(ans[i][0] == u ? ans[i][1] : ans[i][0]); } for (auto v : G[u]) {//父亲是靠近根节点的节点 if (vis[v]) continue; tarjan(v); fa[v] = u;//v的子节点已全部访问完 } } signed main() { init(); cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;//顶点数、询问次数、根节点 for (int i = 1, x, y; i &lt; n; i++) cin &gt;&gt; x &gt;&gt; y, G[x].push_back(y), G[y].push_back(x);//存图 for (int i = 1; i &lt;= m; i++)//存询问 { cin &gt;&gt; ans[i][0] &gt;&gt; ans[i][1]; Q[ans[i][0]].push_back(i); Q[ans[i][1]].push_back(i); } tarjan(s); for (int i = 1; i &lt;= m; i++) cout &lt;&lt; ans[i][2] &lt;&lt; &#39;\\n&#39;; return 0; } 倍增两个节点到达同一节点后，不论怎么向上走，达到的显然还是同一节点 int fa[21][N], dep[N]; void dfs(int x, int pre, int d)//找到每个节点父亲与深度 { fa[0][x] = pre; dep[x] = d; for(auto &amp;to : g[x]) if(to != pre) dfs(to, x, d + 1); } int LCA(int u, int v) { if(dep[u] &gt; dep[v]) swap(u, v); int temp = dep[v] - dep[u];//将u v移到同一深度 for(int i = 0; ((1 &lt;&lt; i) &lt;= temp); i++) if((1 &lt;&lt; i) &amp; temp) v = fa[i][v]; if(u == v) return u; for(int i = log2(n); i &gt;= 0; i--)//两个节点一起往上走 { //最多合法的跳跃是 2 ^ log2(n) if(fa[i][u] != fa[i][v])//如果相同则代表跳的太多了 { u = fa[i][u]; v = fa[i][v]; } } return fa[0][u]; } void init_LCA()// 注意根节点是什么，dfs 默认是根节点是 1 { for(int j = 0; j &lt;= 20; j++) for( int i = 1; i &lt;= n; i++) fa[j][i] = 0; dfs(root, -1, 0); for(int j = 0; (1 &lt;&lt; j) &lt;= n; j++)//预处理出每个节点往上走2^j所到的节点，超过根节点记为-1 { for(int i = 1; i &lt;= n; i++) { if(fa[j][i] &lt; 0) fa[j + 1][i] = -1; else fa[j + 1][i] = fa[j][fa[j][i]]; } } }","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"板子","slug":"板子","permalink":"/tags/板子/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]}]}